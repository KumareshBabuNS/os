     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				;制作目标文件模式
     5 00000000                                 [BITS 32]						;目标机器语言是32位
     6 00000000                                 [INSTRSET "i486p"]              ;告诉编译器程序将运行于486以上机器，即32位cpu
     7 00000000                                 
     8 00000000                                 ;制作目标文件信息
     9 00000000                                 
    10 00000000                                 [FILE "naskfunc.nas"]			;源文件名
    11 00000000                                         	;程序中包含的函数名
    12 00000000                                 
    13 00000000                                 		GLOBAL	_io_hlt,_io_cli,_io_sti,_io_stihlt
    14 00000000                                         GLOBAL  _io_in8,_io_in16,_io_in32
    15 00000000                                         GLOBAL  _io_out8,_io_out16,_io_out32
    16 00000000                                         GLOBAL  _io_load_eflags,_io_store_eflags
    17 00000000                                         GLOBAL  _load_gdtr,_load_idtr
    18 00000000                                         GLOBAL  _write_mem8		
    19 00000000                                 
    20 00000000                                 ;函数体
    21 00000000                                 
    22                                          [SECTION .text]		;目标文件中写了这些后再写程序
    23 00000000                                 
    24 00000000                                 _io_hlt:	; void io_hlt(void);
    25 00000000 F4                              		HLT
    26 00000001 C3                              		RET
    27 00000002                                 
    28 00000002                                 ;屏蔽中断 void io_cli(void);
    29 00000002                                 _io_cli:
    30 00000002                                         clt
    31 00000002 C3                                      ret
    32 00000003                                 ; void io_sti(void);  取消中断屏蔽
    33 00000003                                 _io_sti:
    34 00000003 FB                                      sti
    35 00000004 C3                                      ret
    36 00000005                                 ; void io_stihlt(void) 待机等待中断唤醒
    37 00000005                                 _io_stihlt:
    38 00000005 FB                                      sti
    39 00000006                                         htl
    40 00000006 C3                                      ret
    41 00000007                                         
    42 00000007                                     ; 输入输出函数 ;
    43 00000007                                         
    44 00000007                                 ; int io_in8(int port);
    45 00000007                                 _io_in8 :
      >> [ERROR #001] syntax error.
    46 00000007 8B 54 24 04                             mov     edx, [esp+4]
    47 0000000B B8 00000000                             mov     eax, 0
    48 00000010 EC                                      in      al, dx
    49 00000011 C3                                      ret
    50 00000012                                 ; int io_in16(int port);
    51 00000012                                 _io_in16 :
      >> [ERROR #001] syntax error.
    52 00000012 8B 54 24 04                             mov     edx, [esp+4]
    53 00000016 B8 00000000                             mov     eax, 0
    54 0000001B 66 ED                                   in      ax, dx
    55 0000001D C3                                      ret
    56 0000001E                                 ; int io_in32(int port);
    57 0000001E                                 _io_in32 :
      >> [ERROR #001] syntax error.
    58 0000001E 8B 54 24 04                             mov     edx, [esp+4]
    59 00000022 B8 00000000                             mov     eax, 0
    60 00000027 ED                                      in      eax, dx
    61 00000028 C3                                      ret
    62 00000029                                 ; void io_out8(int port,int data);
    63 00000029                                 _io_out8 :
      >> [ERROR #001] syntax error.
    64 00000029 8B 54 24 04                             mov     edx, [esp+4]
    65 0000002D 8A 44 24 08                             mov     al, [esp+8]
    66 00000031 EE                                      out     dx, al
    67 00000032 C3                                      ret
    68 00000033                                 ; void io_out16(int port,int data);
    69 00000033                                 _io_out16 :
      >> [ERROR #001] syntax error.
    70 00000033 8B 54 24 04                             mov     edx, [esp+4]
    71 00000037 66 8B 44 24 08                          mov     ax, [esp+8]
    72 0000003C 66 EF                                   out     dx, ax
    73 0000003E C3                                      ret
    74 0000003F                                 ; void io_out32(int port,int data);
    75 0000003F                                 _io_out8 :
      >> [ERROR #007] label definition error.
    76 0000003F 8B 54 24 04                             mov     edx, [esp+4]
    77 00000043 8B 44 24 08                             mov     eax, [esp+8]
    78 00000047 EF                                      out     dx, eax
    79 00000048 C3                                      ret
    80 00000049                                 
    81 00000049                                 ; int io_load_eflags();
    82 00000049                                 _io_load_eflags:
    83 00000049 9C                                      pushfd
    84 0000004A 58                                      pop     eax
    85 0000004B C3                                      ret
    86 0000004C                                 ; void io_store_eflags();
    87 0000004C                                 _io_store_eflags:
    88 0000004C 8B 44 24 04                             mov     eax, [esp+4]
    89 00000050 50                                      push    eax
    90 00000051 9D                                      popfd
    91 00000052 C3                                      ret
    92 00000053                                 
    93 00000053                                 ; void load_gdtr(int limit, int data)
    94 00000053                                 _load_gdtr:
    95 00000053 66 8B 44 24 04                          mov     ax, [esp+4]
    96 00000058 66 89 44 24 06                          mov     [esp+6], ax
    97 0000005D 0F 01 54 24 06                          lgdt    [esp+6]
    98 00000062 C3                                      ret
    99 00000063                                 ; void load_idtr(int limit, int data)
   100 00000063                                 _load_idtr:
   101 00000063 66 8B 44 24 04                          mov     ax, [esp+4]
   102 00000068 66 89 44 24 06                          mov     [esp+6], ax
   103 0000006D 0F 01 5C 24 06                          lidt    [esp+6]
   104 00000072 C3                                      ret
   105 00000073                                 
   106 00000073                                 _write_mem8:
   107 00000073 8B 4C 24 04                             mov     ecx, [esp+4]
   108 00000077 8A 44 24 08                             mov     al, [esp+8]
   109 0000007B 88 01                                   mov     [ecx], al
   110 0000007D C3                                      ret
   111 0000007E                                 
